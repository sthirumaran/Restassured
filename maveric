package test.rest.Wiremock;

import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;



import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;
import org.testng.annotations.Test;

import com.github.tomakehurst.wiremock.WireMockServer;
import com.github.tomakehurst.wiremock.WireMockServerRunner;
import com.github.tomakehurst.wiremock.client.WireMock;
import com.github.tomakehurst.wiremock.junit.WireMockRule;

import cucumber.api.java.en.And;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import io.restassured.RestAssured;
import io.restassured.config.HttpClientConfig;
import io.restassured.config.RestAssuredConfig;
import io.restassured.response.Response;

import static org.springframework.http.HttpMethod.GET;
import static org.testng.Assert.assertEquals;

import java.io.File;
import java.io.IOException;

import org.apache.http.params.CoreConnectionPNames;
import org.junit.Rule;
import org.junit.rules.ExpectedException;
import static com.github.tomakehurst.wiremock.client.WireMock.*;

public class Apitest {
	 

	
	
	@Given("^User connected on host server successfully") 
	    public void testStatusCodePositive() {
		try {
	        
		    given().
            when().
            get("http://localhost:8057/api/mytest").
            then().
            assertThat().statusCode(200);   			   
		  
			System.out.println(" Server 8057 working FINE");
		
       } catch(Exception e) {
           assertTrue(e.getMessage().equals("Connection refused: connect"));
           
           

       }
	    
	    
	    }

	    @When("^User connected on second server successfully")
	    public void testStatusCodesecond() throws IOException, InterruptedException {
	    	 try {
			        
	    		    given().
	                when().
	                get("http://localhost:8080/api/mytest").
	                then().
	                assertThat().statusCode(200);   			   
				  
					System.out.println(" Server 8080 working FINE");
				
		       } catch(Exception e) {
		           assertTrue(e.getMessage().equals("Connection refused: connect"));
		           Process p=Runtime.getRuntime().exec("cmd /c dir"); 
		          
		          
		           
		           Runtime.getRuntime().exec(new String[]{"cmd.exe","/c", "wiremock-standalone-2.21.0.jar"}); 
		           Thread.sleep(10000);
		           Thread.sleep(10000);
		           
		       }
		       	
	    }
	   
	    private final RestTemplate restTemplate = new RestTemplate(); 
	    
	    
	    @Then("^Verify API Test on Host server by checking body")
		public void test()
	{
		ResponseEntity<String> exchange =
				restTemplate.exchange("http://localhost:8057/api/mytest",
						GET, null, new ParameterizedTypeReference<String>() {});
		assertTrue( exchange.getBody().equals("API Test"));
		System.out.println(" Server 8057 API working fine");
	}
	
	    @Then("^Verify API Test on Second server by checking body")
		public void test1()
	{
		ResponseEntity<String> exchange =
				restTemplate.exchange("http://localhost:8080/api/mytest",
						GET, null, new ParameterizedTypeReference<String>() {});
		assertTrue( exchange.getBody().equals("API Test"));
		System.out.println(" Server 8080 API working fine");
	}
	    
	

	
}
	


